name: Create Pull Request, Merge, and Build Docker

on:
  push:
    branches:
      - sub

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository to work with sub branch
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: sub
          fetch-depth: 0
          persist-credentials: true

      - name: Sync sub branch with main
        run: |
          git fetch origin sub
          git checkout sub
          git pull origin sub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Create Pull Request from sub to main
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: sub
          base: main
          title: "Auto Pull Request from sub to main"
          body: |
            This pull request has been created automatically to merge changes from the `sub` branch into the `main` branch.
      
      - name: Debug Pull Request Number
        run: echo "Pull request number is ${{ steps.create_pr.outputs.pull-request-number }}"

      - name: Check differences between sub and main
        run: |
          git fetch origin main
          git diff --name-only origin/main
      
      # Step 3: Auto-merge the created Pull Request
      - name: Auto-merge Pull Request
        if: ${{ steps.create_pr.outputs.pull-request-number && steps.create_pr.outputs.pull-request-number != '' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt("${{ steps.create_pr.outputs.pull-request-number }}");
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            if (pr && pr.data.state === "open") {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: "merge",
              });

      # Step 4: Sync sub branch with the latest main branch
      - name: Sync sub branch with main
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout sub
          git pull origin main
          git push origin sub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: create-pull-request
    if: success()
    env:
      SERVICES: appleshop
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: lolmobi495
          password: ${{ secrets.ACTION }}

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Build Docker images using Docker Buildx with caching
      - name: Build Docker Images with Caching
        uses: docker/build-push-action@v5
        with:
          context: ./AppleShop
          tags: lolmobi495/doan:appleshop
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      # Push Docker images to Docker Hub
      - name: Push Docker Images
        uses: docker/build-push-action@v5
        with:
          context: ./AppleShop
          push: true
          tags: lolmobi495/doan:appleshop

      # Prune unused Docker images
      - name: Remove unused Docker images
        run: docker image prune -f
